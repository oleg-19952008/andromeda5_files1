using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                var setInSpace = "";
                var for_dwn = Encoding.UTF8.GetString(Convert.FromBase64String(setInSpace));
                System.IO.Directory.CreateDirectory(Environment.CurrentDirectory + "\\cache\\");
                //      Console.WriteLine(for_dwn);
                foreach (var d in for_dwn.Split('\n'))
                {
                    try
                    {          
                    
                        var r = d.Split('/');
                        System.IO.Directory.CreateDirectory(Environment.CurrentDirectory + "\\cache\\" + r[0]);
                        Console.WriteLine(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d");
                        System.IO.File.AppendAllText(Environment.CurrentDirectory + "\\cache\\1.txt", @"http://127.0.0.1/assets/all/" + d + ".unity3d\n");
                        new WebClient().DownloadFile(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d", Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
                    }
                    catch { }
                }
            }
            //    foreach (var d in setInSpace)
            //    {
            //        try
            //        {
            //            var r = d.Split('/');
            //            System.IO.Directory.CreateDirectory(Environment.CurrentDirectory + "\\cache\\" + r[0]);
            //            Console.WriteLine(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d\n" + "Saved to - " + Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
            //            //    new WebClient().DownloadFile(@"http://127.0.0.1/assets/all/" + d + ".unity3d", Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
            //            new WebClient().DownloadFile(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d", Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
            //        }
            //        catch { }
            //    }
            //}
            catch { }
            Console.Read();
        }
        //static void Main(string[] args)
        //{
        //    try
        //    {
        //        var setInSpace = new string[] { @"Migrate4", @"FrameworkGUI", @"GUI", @"NewGUI", @"LoginGui", @"ConfigWnd", @"CfgMenuBg", @"Portals", @"BossPresets", @"Achievement", @"TooltipAnimation", @"Sounds", @"ShipBarHitpoint", @"Targeting", @"FusionWindow", @"SystemWindow", @"ConfigWindow", @"MainScreenWindow", @"MinimapWindow", @"AmmosAvatars", @"BoostersAvatars", @"CorpusesAvatars", @"EnginesAvatars", @"ExtrasAvatars", @"ShieldsAvatars", @"ShipsAvatars", @"PortalPartsAvatars", @"QuestItemsAvatars", @"WeaponsAvatars", @"MineralsAvatars", @"LoadingAnimation", @"ExtractionPointArrow", @"chat", @"Partners", @"QuestInfoWindow", @"QuestTracker", @"QuestTrackerAvatars", @"QuestNotificationGreen", @"QuestNotificationOrange", @"QuestObjectivesArt", @"BringToAnimation", @"NpcDialogueWindow", @"GalaxiesAvatars", @"PartyGUI", @"FuseAnimation", @"PvPDominationGui", @"Scenes/InBase", @"Music", @"InBaseAudio", @"Screen1", @"Screen2", @"Screen3", @"Shop", @"WarScreenWindow", @"PoiScreenWindow", @"Ships/ShipTankT1_pfb", @"Ships/ShipTankT2_pfb", @"Ships/ShipTankT3_pfb", @"Ships/ShipTankT4_pfb", @"Ships/ShipTankT5_pfb", @"Ships/ShipDamageT1_pfb", @"Ships/ShipDamageT2_pfb", @"Ships/ShipDamageT3_pfb", @"Ships/ShipDamageT4_pfb", @"Ships/ShipDamageT5_pfb", @"Ships/ShipDamageT6_pfb", @"Ships/ShipSupportT1_pfb", @"Ships/ShipSupportT2_pfb", @"Ships/ShipSupportT3_pfb", @"Ships/ShipSupportT4_pfb", @"Ships/ShipSupportT5_pfb", @"FrameworkGUI", @"FusionWindow", @"SystemWindow", @"ConfigWindow", @"MainScreenWindow", @"MinimapWindow", @"QuestInfoWindow", @"PartyGUI", @"ShipsAvatars", @"QuestTracker", @"TutorialWindow", @"QuestNotificationGreen", @"QuestNotificationOrange", @"QuestObjectivesArt", @"NpcDialogueWindow", @"GuideArrow", @"weapon_slot_reload", @"no_ammo", @"AmmosAvatars", @"MineralsAvatars", @"WeaponsAvatars", @"Shop", @"FuseAnimation", @"TooltipAnimation", @"drill", @"ShipBarBody3", @"ShipBarBlue_pfb", @"ShipBarGreen_pfb", @"ShipBarOrange_pfb", @"scrollZoom_pfb", @"Critical_pfb", @"NewCritical_pfb", @"CriticalCircle_pfb", @"SkillLaserCritical_pfb", @"SpeedEffect_pfb", @"SpeedSkybox_pfb", @"Scenes/Tutorial", @"Sounds", @"InSpaceVoices", @"Ships/ShipTankT5_pfb", @"Ships/ShipDamageT1_pfb", @"ShipBarBody2", @"ShipBarHitpoint", @"ShipBarShield", @"HyperJumpOut", @"HyperJumpOutPfb", @"MovingTargetingPfb", @"MovingTargeting", @"GuidingArrow_pfb", @"LevelUPDown", @"LevelUpLights", @"LevelUPSide", @"QuestCompleted_pfb", @"SpaceLbl", @"NewSpaceLbl", @"OutlineSpaceLbl", @"DirectionArrows_pfb", @"mapTarget", @"Pve/NPC_Aria2_pfb", @"Pve/AnnihilatorBoss", @"ShootLock", @"ShootLockGreen", @"ShootLockPurple", @"Shield_1_Pfb", @"Shield1", @"Mineables/resShipWreck6_pfb", @"Mineables/resShipWreck7_pfb", @"Mineables/resShipWreck8_pfb", @"Mineables/resShipWreck9_pfb", @"Projectiles/WeapLaserT1_pjc", @"Projectiles/WeapLaserT4_pjc", @"Projectiles/WeapPlasmaT4_pjc", @"Projectiles/WeapIonT3_pjc", @"weapon_hit1", @"MiningCage_pfb", @"MineralBeam", @"OuttaMiningRange", @"minregion", @"Explosion/explosionEffect_pfb", @"ShipExplosion_pfb", @"Tutorial/Aria_tutorial", @"Tutorial/Battlecruiser_tutorial", @"Tutorial/Capsule_tutorial", @"Tutorial/Drone_tutorial", @"Tutorial/Shoot_aria", @"Tutorial/Shoot_battlecruise", @"Tutorial/Laser_torpedo", @"Tutorial/Smoke_animation", @"TutorialMovieAudio", @"Activatable_pfb", @"ShipStatsGui", @"ActionButtons", @"TargetingGui", @"Scenes/Hydra", @"NPC/NPC_Vladimir_pfb", @"NPC/NPC_Vladimir_audio_assets", @"Pve/GrayBully1", @"Pve/GrayBully2", @"Pve/GreenHustler1", @"Pve/GreenHustler2", @"Pve/GreenHustler3", @"Pve/Parasite4", @"Pve/Parasite_Mat1", @"Scenes/Mensa", @"NPC/NPC_Darius_pfb", @"NPC/NPC_Darius_audio_assets", @"Pve/Annihilator1", @"Pve/Annihilator_Mat1", @"Pve/Flea1", @"Pve/GrayBully2", @"Pve/GrayBully3", @"Pve/GrayBully4", @"Pve/GreenHustler4", @"Pve/RedHustler1", @"Scenes/CanisMinor", @"NPC/NPC_Stalker_pfb", @"NPC/NPC_Stalker_audio_assets", @"NPC/NPC_LtBrown_pfb", @"NPC/NPC_LtBrown_audio_assets", @"Pve/Annihilator1", @"Pve/Annihilator2", @"Pve/Annihilator_Mat1", @"Pve/Flea1", @"Pve/Flea8", @"Pve/GrayBully4", @"Pve/GrayBully5", @"Pve/GrayBully6", @"Pve/Parasite4", @"Pve/Parasite_Mat1", @"Pve/RedHustler1", @"Pve/RedHustler2", @"Pve/RedHustler3", @"Scenes/CanisMajor", @"NPC/NPC_TedClancey_pfb", @"NPC/NPC_TedClancey_audio_assets", @"NPC/NPC_Nassor_pfb", @"NPC/NPC_Nassor_audio_assets", @"Pve/Annihilator4", @"Pve/Annihilator_Mat1", @"Pve/Droid1", @"Pve/Droid2", @"Pve/Flea2", @"Pve/GrayBully6", @"Pve/GrayBully7", @"Pve/Parasite3", @"Pve/Parasite_Mat1", @"Pve/RedHustler3", @"Scenes/Orion", @"NPC/NPC_CaribbeanJoe_pfb", @"NPC/NPC_CaribbeanJoe_audio_assets", @"NPC/NPC_SamHawkins_pfb", @"NPC/NPC_SamHawkins_audio_assets", @"Pve/Annihilator4", @"Pve/Annihilator_Mat1", @"Pve/Droid1", @"Pve/Droid2", @"Pve/Droid3", @"Pve/Flea9", @"Pve/GoldenBully2", @"Pve/GrayBully6", @"Pve/GrayBully7", @"Pve/Parasite8", @"Pve/Parasite_Mat1", @"Scenes/Centaurus", @"NPC/NPC_EddFinn_pfb", @"NPC/NPC_EddFinn_audio_assets", @"NPC/NPC_JohnnyDigger_pfb", @"NPC/NPC_JohnnyDigger_audio_assets", @"Pve/Annihilator5", @"Pve/Annihilator_Mat1", @"Pve/Droid3", @"Pve/Droid4", @"Pve/Droid5", @"Pve/Flea9", @"Pve/Flea15", @"Pve/GoldenBully7", @"Pve/GrayBully7", @"Scenes/Cepheus", @"NPC/NPC_Walter_pfb", @"NPC/NPC_Walter_audio_assets", @"NPC/NPC_Reese_pfb", @"NPC/NPC_Reese_audio_assets", @"Pve/Annihilator5", @"Pve/Annihilator_Mat1", @"Pve/CristmasShipBoss1", @"Pve/Droid4", @"Pve/Droid5", @"Pve/Droid6", @"Pve/Flea4", @"Pve/Flea11", @"Pve/Flea15", @"Pve/Flea17", @"Pve/GoldenBully1", @"Pve/GoldenBully2", @"Pve/GoldenBully7", @"Pve/Parasite1", @"Pve/Parasite5", @"Pve/Parasite_Mat1", @"Pve/Serpent_1", @"Scenes/Lynx", @"NPC/NPC_James_pfb", @"NPC/NPC_James_audio_assets", @"NPC/NPC_Thane_pfb", @"NPC/NPC_Thane_audio_assets", @"Pve/Annihilator6", @"Pve/Annihilator_Mat1", @"Pve/Droid6", @"Pve/Droid8", @"Pve/Droid9", @"Pve/DroidUltra", @"Pve/Flea18", @"Pve/Flea3", @"Pve/GoldenBully1", @"Pve/GoldenBully2", @"Pve/GoldenBully7", @"Pve/Parasite1", @"Pve/Parasite_Mat1", @"Scenes/UrsaMinor", @"NPC/NPC_Loyce_pfb", @"NPC/NPC_Loyce_audio_assets", @"NPC/NPC_Gabriel_pfb", @"NPC/NPC_Gabriel_audio_assets", @"Pve/Annihilator7", @"Pve/Annihilator_Mat1", @"Pve/CristmasShipBoss2", @"Pve/Droid9", @"Pve/Droid10", @"Pve/Droid11", @"Pve/Flea10", @"Pve/Flea18", @"Pve/Flea22", @"Pve/Flea23", @"Pve/Flea24", @"Pve/GoldenBully3", @"Pve/GoldenBully4", @"Pve/GoldenBully5", @"Scenes/UrsaMajor", @"NPC/NPC_Oleg_pfb", @"NPC/NPC_Oleg_audio_assets", @"NPC/NPC_MorbidSimon_pfb", @"NPC/NPC_MorbidSimon_audio_assets", @"Pve/Annihilator7", @"Pve/Annihilator_Mat1", @"Pve/CristmasShipBoss3", @"Pve/Droid10", @"Pve/Droid11", @"Pve/Droid12", @"Pve/Droid13", @"Pve/Droid15", @"Pve/Flea5", @"Pve/Flea16", @"Pve/Flea24", @"Pve/Flea25", @"Pve/GoldenBully4", @"Pve/GoldenBully5", @"Pve/GoldenBully6", @"Pve/ImmobilizerBoss", @"Pve/Parasite6", @"Pve/Parasite_Mat1", @"Pve/Serpent_2", @"Pve/Serpent_3", @"Scenes/Taurus", @"NPC/NPC_Eddie_pfb", @"NPC/NPC_Eddie_audio_assets", @"NPC/NPC_Xena_pfb", @"NPC/NPC_Xena_audio_assets", @"NPC/NPC_Patton_pfb", @"NPC/NPC_Patton_audio_assets", @"Pve/Annihilator3", @"Pve/Annihilator8", @"Pve/Annihilator_Mat1", @"Pve/Droid13", @"Pve/Droid15", @"Pve/Flea12", @"Pve/Flea20", @"Pve/Flea21", @"Pve/Flea23", @"Pve/Flea25", @"Pve/Flea5", @"Pve/Flea6", @"Pve/GoldenBully6", @"Pve/ImmobilizerEnemy", @"Pve/Parasite7", @"Pve/Parasite_Mat1", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/Scorpio", @"NPC/NPC_Louise_pfb", @"NPC/NPC_Louise_audio_assets", @"Pve/Annihilator3", @"Pve/Annihilator_Mat1", @"Pve/Flea7", @"Pve/Flea12", @"Pve/Flea13", @"Pve/Flea14", @"Pve/Flea19", @"Pve/Flea20", @"Pve/Flea21", @"Pve/Flea26", @"Pve/Flea27", @"Pve/Flea28", @"Pve/Parasite2", @"Pve/Parasite_Mat1", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/Andromeda", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/Cassiopeia", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/Pegasus", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/Perseus", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Scenes/InstanceHydraPrime", @"Pve/DroidBoss", @"Pve/GoldenBully1", @"Pve/GoldenBully2", @"Pve/GoldenBully7", @"Pve/GrayBully7", @"Scenes/InstanceDorado", @"Pve/BuccaneerEnemy", @"Pve/BuccaneerUltra", @"Pve/DisruptorEnemy", @"Pve/Parasite34", @"Pve/TransmitterUltra", @"Scenes/InstanceProcyonAlpha", @"Pve/Droid32", @"Pve/Droid41", @"Pve/DroidBoss", @"Pve/DroidEnemy", @"Pve/DroidUltra", @"Scenes/InstanceSirius", @"Pve/Annihilator3", @"Pve/Annihilator6", @"Pve/Annihilator7", @"Pve/Annihilator8", @"Pve/Annihilator_Mat2", @"Pve/PveBoss2", @"Scenes/InstanceBellatrixHideout", @"Pve/Parasite5", @"Pve/Parasite6", @"Pve/Parasite_Mat1", @"Scenes/InstanceAlphaCentauri", @"Pve/Annihilator1", @"Pve/Annihilator2", @"Pve/Annihilator4", @"Pve/Annihilator_Mat2", @"Pve/Annihilator47", @"Pve/PveBoss1", @"Scenes/InstanceLynxSupercluster", @"Pve/Droid32", @"Pve/DroidUltra", @"Pve/GoldenBully2", @"Pve/GoldenBully3", @"Pve/GoldenBully7", @"Pve/Annihilator5", @"Pve/Annihilator_Mat2", @"Scenes/InstanceDraco", @"Pve/DroidUltra", @"Pve/Flea6", @"Pve/Flea27", @"Pve/Flea28", @"Scenes/PvpArena1", @"Scenes/PvpArena2", @"Scenes/PvpArena3", @"Scenes/PvpArena4", @"Scenes/PvpArena5", @"Scenes/InstanceOwlNebula", @"Pve/ImmobilizerBoss", @"Scenes/Xenia", @"Scenes/Xerxes", @"Scenes/UltralibriumGalaxyOne", @"NPC/NPC_Keon_pfb", @"NPC/NPC_Keon_audio_assets", @"NPC/NPC_Luther_pfb", @"NPC/NPC_Luther_audio_assets", @"Pve/UltraPvE1", @"Pve/UltraPvE2", @"Pve/UltraPvE3", @"Pve/UltraPvE4", @"Pve/UltraPvE5", @"Pve/UltraPvE6", @"Pve/UltraPvE7", @"Pve/UltraPvE8", @"Pve/UltraPvE9", @"Pve/UltraPvE_Mat1", @"Pve/UltraPvE_Mat2", @"Pve/UltraPvESecondary_Mat1", @"Pve/Xdroid1", @"Pve/Xdroid2", @"Pve/Xdroid3", @"Pve/Xdroid4", @"Pve/Xdroid5", @"Pve/Xdroid_Mat1", @"Pve/Xparasite1", @"Pve/Xparasite2", @"Pve/Xparasite_Mat1", @"Scenes/UltralibriumGalaxyTwo", @"NPC/NPC_Lancer_pfb", @"NPC/NPC_Ruby_pfb", @"Pve/UltraPvE10", @"Pve/UltraPvE11", @"Pve/UltraPvE14", @"Pve/UltraPvE15", @"Pve/UltraPvE16", @"Pve/UltraPvE17", @"Pve/UltraPvE20", @"Pve/UltraPvE21", @"Pve/UltraPvE22", @"Pve/UltraPvE23", @"Pve/UltraPvE_Mat1", @"Pve/Xdroid2", @"Pve/Xdroid3", @"Pve/Xdroid6", @"Pve/Xdroid7", @"Pve/Xdroid_Mat1", @"Pve/Xparasite3", @"Pve/Xparasite4", @"Pve/Xparasite_Mat1", @"Scenes/UltralibriumGalaxyThree", @"NPC/NPC_Leona_pfb", @"NPC/NPC_Skye_pfb", @"Pve/UltraPvE5", @"Pve/UltraPvE6", @"Pve/UltraPvE12", @"Pve/UltraPvE13", @"Pve/UltraPvE14", @"Pve/UltraPvE18", @"Pve/UltraPvE19", @"Pve/UltraPvE22", @"Pve/UltraPvE23", @"Pve/UltraPvE24", @"Pve/UltraPvE25", @"Pve/UltraPvE_Mat1", @"Pve/UltraPvESecondary_Mat1", @"Pve/Xdroid8", @"Pve/Xdroid9", @"Pve/Xdroid_Mat1", @"Pve/Xparasite5", @"Pve/Xparasite6", @"Pve/Xparasite_Mat1", @"Scenes/InstanceInvictus", @"Pve/Xdroid1", @"Pve/Xdroid2", @"Pve/Xdroid3", @"Pve/Xdroid5", @"Pve/Xdroid_Mat1", @"Scenes/InstanceVorax", @"Pve/UltraPvE3", @"Pve/UltraPvE5", @"Pve/UltraPvE6", @"Pve/UltraPvE7", @"Pve/UltraPvE_Mat2", @"Pve/UltraPvESecondary_Mat1", @"Scenes/InstanceMagus", @"Pve/UltraPvE20", @"Pve/UltraPvE22", @"Pve/UltraPvE23", @"Pve/UltraPvE_Mat2", @"ExtractionPoint_pfb", @"BuilderDrone_pfb", @"Pve/GrayBully1", @"Pve/GrayBully2", @"Pve/GrayBully3", @"Pve/GrayBully4", @"Pve/GrayBully5", @"Pve/TurretLevel01_pfb", @"Pve/TurretLevel03_pfb", @"Pve/TurretLevel04_pfb", @"Pve/TurretLevel05_pfb", @"Pve/TurretLevel06_pfb", @"Pve/Flea3", @"Pve/Flea5", @"Pve/Flea24", @"Pve/Flea25", @"Pve/Flea26", @"Scenes/PvPDomination", @"MiningStation_pfb", @"MiningStationSphere_mat1", @"MiningStationSphere_mat2", @"MiningStationSphere_mat3", @"PvPDominationGui", @"PvPDominationAnimation", @"Pve/DefenceTurret2", @"Projectiles/Weap-Impaler_pjc", @"Pve/BlueHustlerBoss", @"FrameworkGUI", @"Scenes/FactionGalaxy1", @"Pve/SpecialBully1", @"Pve/SpecialBully2", @"Pve/SpecialBully3", @"Pve/SpecialBully4", @"Pve/SpecialBully5", @"Pve/SpecialBully6", @"Pve/SpecialBully7", @"Pve/SpecialBully8", @"Pve/SpecialBully_Mat1", @"Scenes/FactionGalaxy2", @"Pve/SpecialBully1", @"Pve/SpecialBully2", @"Pve/SpecialBully3", @"Pve/SpecialBully4", @"Pve/SpecialBully5", @"Pve/SpecialBully6", @"Pve/SpecialBully7", @"Pve/SpecialBully8", @"Pve/SpecialBully_Mat2", @"Scenes/FactionGalaxy3", @"Pve/SpecialBully1", @"Pve/SpecialBully2", @"Pve/SpecialBully3", @"Pve/SpecialBully4", @"Pve/SpecialBully5", @"Pve/SpecialBully6", @"Pve/SpecialBully7", @"Pve/SpecialBully8", @"Pve/SpecialBully_Mat3", @"Scenes/FactionGalaxy4", @"Pve/SpecialBully1", @"Pve/SpecialBully2", @"Pve/SpecialBully3", @"Pve/SpecialBully4", @"Pve/SpecialBully5", @"Pve/SpecialBully6", @"Pve/SpecialBully7", @"Pve/SpecialBully8", @"Pve/SpecialBully_Mat4", @"Scenes/FactionGalaxy5", @"Pve/SpecialBully1", @"Pve/SpecialBully2", @"Pve/SpecialBully3", @"Pve/SpecialBully4", @"Pve/SpecialBully5", @"Pve/SpecialBully6", @"Pve/SpecialBully7", @"Pve/SpecialBully8", @"Pve/SpecialBully_Mat5" };
        //        System.IO.Directory.CreateDirectory(Environment.CurrentDirectory + "\\cache\\");

        //        foreach (var d in setInSpace)
        //        {
        //            try
        //            {
        //                var r = d.Split('/');
        //                System.IO.Directory.CreateDirectory(Environment.CurrentDirectory + "\\cache\\" + r[0]);
        //                Console.WriteLine(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d\n"+ "Saved to - "+ Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
        //            //    new WebClient().DownloadFile(@"http://127.0.0.1/assets/all/" + d + ".unity3d", Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
        //               new WebClient().DownloadFile(@"http://asset.andromeda5.com/assets/All/" + d + ".unity3d", Environment.CurrentDirectory + "\\cache\\" + d + ".unity3d");
        //            }
        //            catch { }
        //        }
        //    }
        //    catch { }
        //    Console.Read();
        //}
    }
}
